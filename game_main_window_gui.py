# -*- coding: utf-8 -*-
# Author: Vodohleb04

# Form implementation generated from reading ui file 'mainGameWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from ecosystem import EcoSystem
import creature_stats_dialog
import add_creatures_dialog
import create_new_world_dialog
import help_dialog
import configs
import time
import os


AUTO_PERIOD_MUTEX = QtCore.QMutex()
STOP_AUTO_PERIOD_FLAG = False


def up_stop_auto_period_flag():
    """Makes STOP_AUTO_PERIOD_FLAG equal True

    Using to stop cycle in thread, that is used in automatic mode
    """
    global STOP_AUTO_PERIOD_FLAG
    STOP_AUTO_PERIOD_FLAG = True


class ToolBarSignals(QtCore.QObject):  # Signals for make/close toolbar, that is used as menu
    makeToolBar = QtCore.pyqtSignal()
    closeToolBar = QtCore.pyqtSignal()


class ExitSaveSignal(QtCore.QObject):  # Signal to save world before exit
    exitSaveSignal = QtCore.pyqtSignal()


class AutoPeriodThreadSignals(QtCore.QObject):  # Signals used in automatic mode
    next_period = QtCore.pyqtSignal()
    close_thread = QtCore.pyqtSignal()


class AutoPeriodRunnable(QtCore.QRunnable):

    def __init__(self, auto_period_thread_signal: AutoPeriodThreadSignals, auto_period_speed):
        """Creates QtCore.QRunnable object to run function in new thread

        auto_period_thread_signal - used to emit signals (next period, close thread)
        auto_period_speed - value used as coefficient to count pause between periods
        TIME / auto_period_speed = pause between periods; TIME value defined in configs

        Makes automatic mode possible
        """
        self.auto_period_thread_signal = auto_period_thread_signal
        self._auto_period_speed = auto_period_speed
        super().__init__()
        self.auto_period_thread_signal.close_thread.connect(up_stop_auto_period_flag)

    @property
    def auto_period_speed(self) -> int:
        """Returns auto period speed"""
        return self._auto_period_speed

    @auto_period_speed.setter
    def auto_period_speed(self, auto_period_speed):
        """Sets new auto period speed"""
        self._auto_period_speed = auto_period_speed

    def run(self):
        """Change periods in automatic mode

        emit signal to make new period, pause between signals = TIME / auto_period_speed
        Stops automatically after 1000000 iterations. Can be stopped by setting STOP_AUTO_PERIOD_FLAG False
        """
        global STOP_AUTO_PERIOD_FLAG
        i = 0
        while True:
            AUTO_PERIOD_MUTEX.lock()
            if i >= 1000000 or STOP_AUTO_PERIOD_FLAG:
                STOP_AUTO_PERIOD_FLAG = False
                AUTO_PERIOD_MUTEX.unlock()
                break
            AUTO_PERIOD_MUTEX.unlock()
            self.auto_period_thread_signal.next_period.emit()
            time.sleep(configs.AutoPeriodParams.TIME.value / self._auto_period_speed)
            i += 1


class CustomMainWindow(QtWidgets.QMainWindow):

    def __init__(self, parent=None):
        """Creates custom main window

        Customization includes:
            signals:
                tool_bar_signals - used to create of remove game menu
                exit_save_signal - used to emit signal to save game before exit
                auto_period_thread_signals - used in automatic mode to make new period or to close additional thread
            flags:
                game_running_flag - true, if game world is active
                tool_bar_active - true, if menu is created and active now
            events:
                custom close event - requires acception of user to close window (exit game). User can save game before
                    exit, exit without saving, reject close event
                custom key event - if esc button is pressed - creates or hides menu (tool bar)
        """
        self.tool_bar_signals = ToolBarSignals()
        self.exit_save_signal = ExitSaveSignal()
        self.tool_bar_active_flag = True
        self.game_running_flag = False
        self.auto_period_thread_signals = AutoPeriodThreadSignals()
        QtWidgets.QWidget.__init__(self, parent)
        window_icon = QtGui.QIcon()
        window_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["gui_windows_icon"]), QtGui.QIcon.Selected,
                              QtGui.QIcon.On)
        self.setWindowIcon(window_icon)
        self.resize(300, 100)

    def _game_running_exit(self, close_event) -> None:
        """Creates dialog to ask about exit again

        User can exit game without saving, save game and exit, can reject exit

        close_event - close event
        """
        result = QtWidgets.QMessageBox.question(
            self,
            "Подтверждение закрытия окна",
            "Вы действительно хотите закрыть окно? Несохранённые изменения будут утеряны.",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Save,
            QtWidgets.QMessageBox.No)
        if result == QtWidgets.QMessageBox.Yes:
            AUTO_PERIOD_MUTEX.lock()
            self.auto_period_thread_signals.close_thread.emit()
            AUTO_PERIOD_MUTEX.unlock()
            close_event.accept()
            QtWidgets.QWidget.closeEvent(self, close_event)
        elif result == QtWidgets.QMessageBox.Save:
            self.exit_save_signal.exitSaveSignal.emit()
            close_event.accept()
            QtWidgets.QWidget.closeEvent(self, close_event)
        else:
            close_event.ignore()

    def _game_not_running_exit(self, close_event) -> None:
        """Creates dialog to ask about exit again

        User can accept exit and reject exit.

        close_event - close event
        """
        result = QtWidgets.QMessageBox.question(
            self,
            "Подтверждение закрытия окна",
            "Вы действительно хотите закрыть окно?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
        if result == QtWidgets.QMessageBox.Yes:
            AUTO_PERIOD_MUTEX.lock()
            self.auto_period_thread_signals.close_thread.emit()
            AUTO_PERIOD_MUTEX.unlock()
            close_event.accept()
            QtWidgets.QWidget.closeEvent(self, close_event)
        else:
            close_event.ignore()

    def closeEvent(self, event) -> None:
        """Creates dialog to ask about exit again

        If game is running - creates dialog with save button

        event - close event
        """
        if self.game_running_flag:
            self._game_running_exit(event)
        else:
            self._game_not_running_exit(event)

    def keyPressEvent(self, a0: QtGui.QKeyEvent) -> None:
        """Handle esc-key pressed event

        a0 - key pressed event
        """
        if a0.key() == QtCore.Qt.Key.Key_Escape:
            if self.tool_bar_active_flag:
                if self.game_running_flag:
                    self.tool_bar_active_flag = False
                    self.tool_bar_signals.closeToolBar.emit()
            else:
                self.tool_bar_active_flag = True
                self.tool_bar_signals.makeToolBar.emit()

    def raise_running_game_flag(self) -> None:
        """Sets running_game_flag True"""
        self.game_running_flag = True

    def lower_running_game_flag(self) -> None:
        """Sets running_game_flag False"""
        self.game_running_flag = False

    def raise_tool_bar_active_flag(self) -> None:
        """Sets tool_bar_active_flag True"""
        self.tool_bar_active_flag = True

    def lower_tool_bar_active_flag(self) -> None:
        """Sets tool_bar_active_flag False"""
        self.tool_bar_active_flag = False


class Ui_MainWindow(object):
    def setupUi(self, MainWindow: CustomMainWindow, ecosystem: EcoSystem) -> None:
        """Creates objects of Main window
        
        ecosystem - data controller part of program
        """
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.resize(1158, 579)
        MainWindow.setMouseTracking(False)
        MainWindow.setTabletTracking(False)
        windowIcon = QtGui.QIcon()
        windowIcon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["gui_windows_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(windowIcon)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("background-color: rgb(255, 242, 254);")
        MainWindow.setStyleSheet("""QToolTip {background-color: white; 
                                              color: black; 
                                              border: black solid 1px}""")
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        MainWindow.setAnimated(True)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        MainWindow.setDockNestingEnabled(False)
        MainWindow.setDockOptions(QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        MainWindow.setMinimumSize(1000, 579)

        self.auto_period_thread_signals = MainWindow.auto_period_thread_signals
        self.auto_period_thread_signals.next_period.connect(lambda: self._next_period(ecosystem))
        self.auto_period_thread = QtCore.QThreadPool()
        self.auto_period_runnable = None
        self.auto_period_speed = configs.AutoPeriodParams.MIN_SPEED.value
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet(f"border-image: url({configs.SERVICE_ICONS['menu_background']});")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")

        self.wakeDeadlyWormButton = QtWidgets.QPushButton(self.centralwidget)
        self.wakeDeadlyWormButton.setBaseSize(QtCore.QSize(108, 32))
        self.wakeDeadlyWormButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.wakeDeadlyWormButton.setStyleSheet("background-color: rgb(224, 224, 255);")
        self.wakeDeadlyWormButton.setObjectName("wakeDeadlyWordButton")
        self.gridLayout.addWidget(self.wakeDeadlyWormButton, 2, 6, 1, 1)

        self.addCreatureButton = QtWidgets.QPushButton(self.centralwidget)
        self.addCreatureButton.setBaseSize((QtCore.QSize(108, 32)))
        self.addCreatureButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.addCreatureButton.setStyleSheet("background-color: rgb(224, 224, 255);")
        self.addCreatureButton.setText("")
        add_creature_icon = QtGui.QIcon()
        add_creature_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["add_icon"]), QtGui.QIcon.Normal,
                                    QtGui.QIcon.Off)
        self.addCreatureButton.setIcon(add_creature_icon)
        self.addCreatureButton.setCheckable(False)
        self.addCreatureButton.setObjectName("addCreatureButton")
        self.gridLayout.addWidget(self.addCreatureButton, 2, 0, 1, 1)

        self.removeCreatureButton = QtWidgets.QPushButton(self.centralwidget)
        self.removeCreatureButton.setBaseSize((QtCore.QSize(108, 32)))
        self.removeCreatureButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.removeCreatureButton.setStyleSheet("background-color: rgb(224, 224, 255);")
        self.removeCreatureButton.setText("")
        add_creature_icon = QtGui.QIcon()
        add_creature_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["minus_icon"]), QtGui.QIcon.Normal,
                                    QtGui.QIcon.Off)
        self.removeCreatureButton.setIcon(add_creature_icon)
        self.removeCreatureButton.setCheckable(False)
        self.removeCreatureButton.setEnabled(False)
        self.removeCreatureButton.setObjectName("removeCreatureButton")
        self.gridLayout.addWidget(self.removeCreatureButton, 2, 1, 1, 1)
        self.periodButton = QtWidgets.QPushButton(self.centralwidget)
        self.periodButton.setBaseSize(QtCore.QSize(108, 32))
        self.periodButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.periodButton.setStyleSheet("background-color: rgb(224, 224, 255);")
        self.periodButton.setText("")
        period_icon = QtGui.QIcon()
        period_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["period_button_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.periodButton.setIcon(period_icon)
        self.periodButton.setCheckable(False)
        self.periodButton.setObjectName("periodButton")
        self.gridLayout.addWidget(self.periodButton, 2, 2, 1, 1)
        self.reduceAutoSpeedButton = QtWidgets.QPushButton(self.centralwidget)
        self.reduceAutoSpeedButton.setEnabled(False)
        self.reduceAutoSpeedButton.setBaseSize(QtCore.QSize(108, 32))
        self.reduceAutoSpeedButton.setStyleSheet("background-color: rgb(224, 224, 255);")
        self.reduceAutoSpeedButton.setObjectName("reduceAutoSpeedButton")
        self.gridLayout.addWidget(self.reduceAutoSpeedButton, 2, 3, 1, 1)
        self.autoPeriodButton = QtWidgets.QPushButton(self.centralwidget)
        self.autoPeriodButton.setBaseSize(QtCore.QSize(108, 32))
        self.autoPeriodButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.autoPeriodButton.setStatusTip("")
        self.autoPeriodButton.setWhatsThis("")
        self.autoPeriodButton.setStyleSheet("background-color: rgb(224, 224, 255);")
        self.autoPeriodButton.setIconSize(QtCore.QSize(16, 16))
        self.autoPeriodButton.setCheckable(True)
        self.autoPeriodButton.setObjectName("autoPeriodButton")
        self.gridLayout.addWidget(self.autoPeriodButton, 2, 4, 1, 1)
        self.cellDataListWidget = QtWidgets.QListWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cellDataListWidget.sizePolicy().hasHeightForWidth())
        self.cellDataListWidget.setSizePolicy(sizePolicy)
        self.cellDataListWidget.setStyleSheet("background-color: rgb(247, 255, 238);")
        self.cellDataListWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.cellDataListWidget.setObjectName("cellDataListWidget")
        self.gridLayout.addWidget(self.cellDataListWidget, 0, 0, 2, 2)
        self.worldMapTable = QtWidgets.QTableWidget(self.centralwidget)
        self.worldMapTable.setStyleSheet("background-color: rgb(247, 255, 238);")
        self.worldMapTable.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.worldMapTable.setAutoScroll(False)
        self.worldMapTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.worldMapTable.setDragEnabled(False)
        self.worldMapTable.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.worldMapTable.setGridStyle(QtCore.Qt.SolidLine)
        self.worldMapTable.setCornerButtonEnabled(False)
        self.worldMapTable.setObjectName("worldMapTable")
        self._emplace_elements(ecosystem)
        self.gridLayout.addWidget(self.worldMapTable, 0, 2, 2, 6)
        self.increaseAutoSpeedButton = QtWidgets.QPushButton(self.centralwidget)
        self.increaseAutoSpeedButton.setEnabled(False)
        self.increaseAutoSpeedButton.setBaseSize(QtCore.QSize(108, 32))
        self.increaseAutoSpeedButton.setStatusTip("")
        self.increaseAutoSpeedButton.setStyleSheet("background-color: rgb(224, 224, 255);")
        self.increaseAutoSpeedButton.setObjectName("increaseAutoSpeedButton")
        self.gridLayout.addWidget(self.increaseAutoSpeedButton, 2, 5, 1, 1)
        self.appocalipseButton = QtWidgets.QPushButton(self.centralwidget)
        self.appocalipseButton.setBaseSize(QtCore.QSize(108, 32))
        self.appocalipseButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.appocalipseButton.setStyleSheet("background-color: rgb(224, 224, 255);")
        self.appocalipseButton.setObjectName("appocalipseButton")
        self.gridLayout.addWidget(self.appocalipseButton, 2, 7, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setEnabled(True)
        self.toolBar.setMovable(False)
        self.toolBar.setAllowedAreas(QtCore.Qt.LeftToolBarArea)
        self.toolBar.setOrientation(QtCore.Qt.Vertical)
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.toolBar.setFloatable(False)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar)

        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setEnabled(True)
        self.statusBar.setObjectName("statusBar")
        self.statusBar.show()
        MainWindow.setStatusBar(self.statusBar)

        self.newWorldAction = QtWidgets.QAction(MainWindow)
        add_icon = QtGui.QIcon()
        add_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["add_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.newWorldAction.setIcon(add_icon)
        self.newWorldAction.setIconVisibleInMenu(True)
        self.newWorldAction.setObjectName("newWorldAction")
        self.loadWorldAction = QtWidgets.QAction(MainWindow)
        load_icon = QtGui.QIcon()
        load_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["load_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.loadWorldAction.setIcon(load_icon)
        self.loadWorldAction.setObjectName("loadWorldAction")
        self.leaveWorldAction = QtWidgets.QAction(MainWindow)
        exit_icon = QtGui.QIcon()
        exit_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["exit_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.leaveWorldAction.setIcon(exit_icon)
        self.leaveWorldAction.setObjectName("leaveWorldAction")
        self.exitGameAction = QtWidgets.QAction(MainWindow)
        linux_icon = QtGui.QIcon()
        linux_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["linux_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.exitGameAction.setIcon(linux_icon)
        self.exitGameAction.setObjectName("exitGameAction")
        self.saveAsWorldAction = QtWidgets.QAction(MainWindow)
        save_as_icon = QtGui.QIcon()
        save_as_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["save_as_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveAsWorldAction.setIcon(save_as_icon)
        self.saveAsWorldAction.setObjectName("saveAsWorldAction")
        self.saveWorldAction = QtWidgets.QAction(MainWindow)
        save_icon = QtGui.QIcon()
        save_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["save_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveWorldAction.setIcon(save_icon)
        self.saveWorldAction.setObjectName("saveWorldAction")
        self.helpAction = QtWidgets.QAction(MainWindow)
        question_icon = QtGui.QIcon()
        question_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["question_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.helpAction.setIcon(question_icon)
        self.helpAction.setObjectName("helpAction")
        self.showMapAction = QtWidgets.QAction(MainWindow)
        show_map_icon = QtGui.QIcon()
        show_map_icon.addPixmap(QtGui.QPixmap(configs.SERVICE_ICONS["map_icon"]), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.showMapAction.setIcon(show_map_icon)
        self.showMapAction.setObjectName("showMapAction")
        self.showMapAction.setCheckable(False)
        self.toolBar.addAction(self.newWorldAction)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.saveAsWorldAction)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.saveWorldAction)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.loadWorldAction)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.showMapAction)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.helpAction)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.leaveWorldAction)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.exitGameAction)
        self.toolBar.addSeparator()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self._makeToolBarFunction()

        self.saveAsWorldAction.triggered.connect(lambda: self._showSaveFileDialog(MainWindow, ecosystem))
        self.saveWorldAction.triggered.connect(lambda: self._simple_save_of_game(MainWindow, ecosystem))
        self.loadWorldAction.triggered.connect(lambda: self._showLoadFileDialog(MainWindow, ecosystem))
        self.exitGameAction.triggered.connect(MainWindow.close)
        self.showMapAction.triggered.connect(lambda: self._map_action_triggered(MainWindow))
        self.newWorldAction.triggered.connect(lambda: self._make_new_world_dialog(MainWindow, ecosystem))
        self.leaveWorldAction.triggered.connect(lambda: self._leave_world(MainWindow, ecosystem))
        self.helpAction.triggered.connect(lambda: self._make_help_dialog(MainWindow))

        MainWindow.tool_bar_signals.makeToolBar.connect(self._makeToolBarFunction)
        MainWindow.tool_bar_signals.closeToolBar.connect(self._closeToolBarFunction)
        MainWindow.exit_save_signal.exitSaveSignal.connect(lambda: ecosystem.save())

        self.worldMapTable.itemClicked.connect(lambda: self._show_creatures(ecosystem))
        self.cellDataListWidget.itemDoubleClicked.connect(lambda: self._show_creature_stats(MainWindow, ecosystem))
        self.periodButton.clicked.connect(lambda: self._next_period(ecosystem))
        self.wakeDeadlyWormButton.clicked.connect(lambda: self._wake_deadly_worm(ecosystem))
        self.appocalipseButton.clicked.connect(lambda: self._apocalypse(ecosystem))
        self.autoPeriodButton.clicked.connect(self._auto_period)
        self.increaseAutoSpeedButton.clicked.connect(self._increase_auto_speed)
        self.reduceAutoSpeedButton.clicked.connect(self._reduce_auto_speed)
        self.cellDataListWidget.currentItemChanged.connect(self._make_remove_creature_enabled)
        self.removeCreatureButton.clicked.connect(lambda: self._remove_creature_button_clicked(ecosystem))
        self.addCreatureButton.clicked.connect(lambda: self._add_creatures_dialog(MainWindow, ecosystem))

    def _unknown_creature_error(self, ex: ValueError) -> None:
        """Shows message about error (Unknown type of creature)"""
        self._pause_game()
        error_msg_box = QtWidgets.QMessageBox()
        error_msg_box.setWindowTitle("Ошибка")
        error_msg_box.setText("Неизвестный тип существа")
        error_msg_box.setInformativeText(ex.args[0])
        error_msg_box.setIcon(QtWidgets.QMessageBox.Warning)
        error_msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok)
        error_msg_box.setDefaultButton(QtWidgets.QMessageBox.Ok)
        error_msg_box.adjustSize()
        error_msg_box.accepted.connect(self._closeToolBarFunction)
        error_msg_box.rejected.connect(self._closeToolBarFunction)
        error_msg_box.exec()

    def _show_creature_stats(self, MainWindow: CustomMainWindow, ecosystem: EcoSystem) -> None:
        """Creates dialog (CustomCreatureStatsDialog) to check stats of selected creature
        
        MainWindow - main window of program
        ecosystem - data controller part of program
        """
        self._pause_game()
        creature_removed_signal = creature_stats_dialog.CreatureRemovedSignal()
        creature_removed_signal.creatureRemoved.connect(
            lambda: self._remove_creature(ecosystem,
                                          ecosystem.find_creature(self.cellDataListWidget.currentItem().text())))
        creature_stat_dialog_window = creature_stats_dialog.CustomCreatureStatsDialog(creature_removed_signal,
                                                                                      parent=MainWindow)
        creature_stat_dialog_window.accepted.connect(lambda: self._continue_game(MainWindow.game_running_flag))
        ui = creature_stats_dialog.Ui_creatureStatsDialog()

        try:
            ui.setupUi(creature_stat_dialog_window,
                       ecosystem,
                       ecosystem.find_creature(self.cellDataListWidget.currentItem().text()))
            creature_stat_dialog_window.show()
            creature_stat_dialog_window.exec()
        except ValueError as ex:
            self._unknown_creature_error(ex)

    def _add_creatures_dialog(self, MainWindow: CustomMainWindow, ecosystem: EcoSystem) -> None:
        """Creates dialog to add creatures (CustomAddCreaturesDialog) to selected hectare of forest
        
        MainWindow - main window of program
        ecosystem - data controller part of program
        """
        self._pause_game()
        add_creatures_dialog_window = add_creatures_dialog.CustomAddCreaturesDialog(parent=MainWindow)
        add_creatures_dialog_window.accepted.connect(
            lambda: self.statusBar.showMessage(configs.GuiMessages.CREATURES_ADDED.value, configs.MESSAGE_DURATION))
        add_creatures_dialog_window.addCreaturesSignal.updateMapSignal.connect(lambda: self._update(ecosystem))
        add_creatures_dialog_window.accepted.connect(lambda: self._continue_game(MainWindow.game_running_flag))
        add_creatures_dialog_window.rejected.connect(lambda: self._continue_game(MainWindow.game_running_flag))
        ui = add_creatures_dialog.Ui_addCreaturesDialog()
        ui.setupUi(add_creatures_dialog_window,
                   ecosystem,
                   self.worldMapTable.currentItem().row(),
                   self.worldMapTable.currentItem().column())
        add_creatures_dialog_window.show()
        add_creatures_dialog_window.exec()

    def _new_world_done_message(self, world_name: str) -> None:
        """Shows message into statusBar. Message include information about name of created world"""
        self.statusBar.showMessage(configs.GuiMessages.NEW_WORLD_MESSAGE.value.format(world_name),
                                   configs.MESSAGE_DURATION)

    def _new_world_done(self, ecosystem) -> None:
        """Updates widgets and close menu after creation of new world"""
        self.worldMapTable.clear()
        self.cellDataListWidget.clear()
        self._emplace_elements(ecosystem)
        self._closeToolBarFunction()

    def _make_new_world_dialog(self, MainWindow: CustomMainWindow, ecosystem: EcoSystem) -> None:
        """Creates newWorldDialog to make new world
        
        MainWindow - main window of program
        ecosystem - data controller part of program
        """
        new_world_dialog = create_new_world_dialog.CustomNewWorldDialog(parent=MainWindow)
        new_world_dialog.newWorldAcceptedSignals.world_is_made_message_signal.connect(self._new_world_done_message)
        new_world_dialog.newWorldAcceptedSignals.world_is_made_signal.connect(self._new_world_done)
        new_world_dialog.newWorldAcceptedSignals.game_is_running_signal.connect(MainWindow.raise_running_game_flag)
        new_world_dialog.newWorldAcceptedSignals.game_is_running_signal.connect(
            lambda: self.showMapAction.setCheckable(True))
        new_world_dialog.newWorldAcceptedSignals.game_is_running_signal.connect(MainWindow.lower_tool_bar_active_flag)
        ui = create_new_world_dialog.Ui_newWorldDialog()
        ui.setupUi(new_world_dialog, ecosystem)
        new_world_dialog.show()
        new_world_dialog.exec()

    def _make_help_dialog(self, MainWindow: CustomMainWindow) -> None:
        """Makes helpDialogWindow with some information about program
        
        MainWindow - main window of program
        """
        helpDialogWindow = QtWidgets.QDialog(MainWindow)
        ui = help_dialog.Ui_InfoDialog()
        ui.setupUi(helpDialogWindow)
        helpDialogWindow.show()
        helpDialogWindow.exec()

    def _next_period(self, ecosystem: EcoSystem) -> None:
        """Make new period of ecosystem
        
        ecosystem - data controller part of program
        """
        ecosystem.cycle()
        self._update(ecosystem)
        self.statusBar.showMessage(configs.GuiMessages.PERIOD_SPEND.value, msecs=configs.MESSAGE_DURATION)

    def _enabled_support_auto_period_buttons(self) -> None:
        """Activates/deactivates increaseAutoSpeedButton and reduceAutoPeriodSpeed
         
         Behaviour depends on current auto_period_speed"""
        if self.auto_period_speed <= configs.AutoPeriodParams.MIN_SPEED.value:
            self.reduceAutoSpeedButton.setEnabled(False)
            self.increaseAutoSpeedButton.setEnabled(True)
        elif self.auto_period_speed >= configs.AutoPeriodParams.MAX_SPEED.value:
            self.reduceAutoSpeedButton.setEnabled(True)
            self.increaseAutoSpeedButton.setEnabled(False)
        else:
            self.reduceAutoSpeedButton.setEnabled(True)
            self.increaseAutoSpeedButton.setEnabled(True)

    def _cancel_auto_period_thread(self) -> None:
        """Stopes additional thread that makes new periods in automatic mode"""
        if self.auto_period_runnable:
            AUTO_PERIOD_MUTEX.lock()
            self.auto_period_thread_signals.close_thread.emit()
            AUTO_PERIOD_MUTEX.unlock()
            self.auto_period_runnable = None

    def _start_auto_period_in_thread(self) -> None:
        """Creates additional thread that makes new periods in automatic mode"""
        self._cancel_auto_period_thread()
        self.auto_period_runnable = AutoPeriodRunnable(self.auto_period_thread_signals, self.auto_period_speed)
        self.periodButton.setEnabled(False)
        self._enabled_support_auto_period_buttons()
        self.auto_period_thread.start(self.auto_period_runnable)

    def _auto_period(self) -> None:
        """Determine behaviour after click of autoPeriodButton
        
        If automatic mode was on - creates additional thread
        else - stopes additional thread and deactivates automat mode buttons (autoPeriodButton, reduceAutoSpeedButton
        increaseAutoSpeedButton) 
        """
        if self.autoPeriodButton.isChecked():
            self._start_auto_period_in_thread()
        else:
            self._cancel_auto_period_thread()
            self.periodButton.setEnabled(True)
            self.reduceAutoSpeedButton.setEnabled(False)
            self.increaseAutoSpeedButton.setEnabled(False)

    def _increase_auto_speed(self) -> None:
        """Increments auto_period_speed"""
        self.auto_period_speed += 1
        AUTO_PERIOD_MUTEX.lock()
        if self.auto_period_runnable:
            self.auto_period_runnable.auto_period_speed = self.auto_period_speed
        AUTO_PERIOD_MUTEX.unlock()
        self._enabled_support_auto_period_buttons()

    def _reduce_auto_speed(self) -> None:
        """Decrements auto_period_speed"""
        self.auto_period_speed -= 1
        AUTO_PERIOD_MUTEX.lock()
        if self.auto_period_runnable:
            self.auto_period_runnable.auto_period_speed = self.auto_period_speed
        AUTO_PERIOD_MUTEX.unlock()
        self._enabled_support_auto_period_buttons()

    def _wake_deadly_worm(self, ecosystem: EcoSystem) -> None:
        """Removes dead creatures from ecosystem
        
        ecosystem - data controller part of program
        """
        ecosystem.provoke_deadly_worm()
        self._update(ecosystem)
        self.statusBar.showMessage(configs.GuiMessages.MANUAL_DEADLY_WORM.value, msecs=configs.MESSAGE_DURATION)

    def _make_remove_creature_enabled(self) -> None:
        """Activates/deactivates removeCreatureButton
        
        Activates button if creature was selected in cellDataListWidget
        Deactivates if selection in cellDataListWidget is empty  
        """
        if not self.cellDataListWidget.currentItem():
            self.removeCreatureButton.setEnabled(False)
        elif self.cellDataListWidget.currentItem().text() == configs.GuiMessages.WASTELAND_CREATURES_INFO.value:
            self.removeCreatureButton.setEnabled(False)
        else:
            self.removeCreatureButton.setEnabled(True)

    def _remove_creature_button_clicked(self, ecosystem: EcoSystem) -> None:
        """Requires acception to remove creature and removes creature if user accept it
        
        ecosystem - data controller part of program
        """
        self._pause_game()
        creature = ecosystem.find_creature(self.cellDataListWidget.currentItem().text())
        before_delete_msg_box = QtWidgets.QMessageBox()
        before_delete_msg_box.setWindowTitle(f"Уничтожение существа {creature.id}")
        before_delete_msg_box.setText(f"Вы уверены, что хотите уничтожить существо {creature.id}")
        before_delete_msg_box.setInformativeText(configs.GuiMessages.REMOVE_CREATURE_INFORMATIVE_TEXT.value)
        before_delete_msg_box.setIcon(QtWidgets.QMessageBox.Question)
        before_delete_msg_box.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        before_delete_msg_box.setDefaultButton(QtWidgets.QMessageBox.No)
        before_delete_msg_box.adjustSize()
        before_delete_msg_box.accepted.connect(lambda: self._remove_creature(ecosystem, creature))
        before_delete_msg_box.accepted.connect(lambda: self._continue_game(game_running_flag=True))
        before_delete_msg_box.rejected.connect(lambda: self._continue_game(game_running_flag=True))
        before_delete_msg_box.exec()

    def _apocalypse(self, ecosystem: EcoSystem) -> None:
        """Requires acception to make apocalypse and makes it if user agree
        
        ecosystem - data controller part of program
        """
        self._pause_game()
        before_apocalypse_message_box = QtWidgets.QMessageBox()
        before_apocalypse_message_box.setWindowTitle(f"Печати апокалипсиса")
        before_apocalypse_message_box.setText("Вы уверены, что хотите снять 7 печатей апокалипсиса?")
        before_apocalypse_message_box.setInformativeText(configs.GuiMessages.APOCALYPSE_INFORMATIVE_TEXT.value)
        before_apocalypse_message_box.setIcon(QtWidgets.QMessageBox.Question)
        before_apocalypse_message_box.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        before_apocalypse_message_box.setDefaultButton(QtWidgets.QMessageBox.No)
        before_apocalypse_message_box.adjustSize()
        before_apocalypse_message_box.accepted.connect(ecosystem.apocalypse)
        before_apocalypse_message_box.accepted.connect(lambda: self._continue_game(game_running_flag=True))
        before_apocalypse_message_box.rejected.connect(lambda: self._continue_game(game_running_flag=True))
        before_apocalypse_message_box.exec()
        self._update(ecosystem)
        self.statusBar.showMessage(configs.GuiMessages.APOCALYPSE.value, msecs=configs.MESSAGE_DURATION)

    def _remove_creature(self, ecosystem: EcoSystem, creature) -> None:
        """Removes creature from ecosystem

        ecosystem - data controller part of program
        creature - some creature of ecosystem
        """
        ecosystem.remove_creature(creature.id)
        self._update(ecosystem)
        self.statusBar.showMessage(f"Существо {creature.id} уничтожено безвозвратно", msecs=configs.MESSAGE_DURATION)

    def _update(self, ecosystem: EcoSystem) -> None:
        """Updates widgets of program (worldMapTable, cellDataWidget)

        ecosystem - data controller part of program
        """
        self._update_table(ecosystem)
        self._show_creatures(ecosystem)

    def _show_creatures(self, ecosystem: EcoSystem) -> None:
        """Shows creatures of current hectare in cellDataListWidgets

        ecosystem - data controller part of program
        """
        self.cellDataListWidget.clear()
        if ecosystem.is_wasteland():
            item = QtWidgets.QListWidgetItem()
            brush = QtGui.QBrush(QtGui.QColor(244, 224, 255))
            brush.setStyle(QtCore.Qt.SolidPattern)
            item.setBackground(brush)
            item.setText(configs.GuiMessages.WASTELAND_CREATURES_INFO.value)
            self.cellDataListWidget.addItem(item)
        else:
            for creature in ecosystem.forest.hectares[self.worldMapTable.currentRow()][self.worldMapTable.currentColumn()].creations:
                item = QtWidgets.QListWidgetItem()
                brush = QtGui.QBrush(QtGui.QColor(244, 224, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                item.setBackground(brush)
                item.setText(creature.id)
                self.cellDataListWidget.addItem(item)

    def _update_table(self, ecosystem: EcoSystem) -> None:
        """Updates information shown in worldMapTable

        ecosystem - data controller part of program
        """
        if ecosystem.is_wasteland():
            for i in range(len(ecosystem.forest.hectares)):
                for j in range(len(ecosystem.forest.hectares[i])):
                    cell_text = configs.GuiMessages.WASTELAND_MAP_INFO.value
                    self.worldMapTable.item(i, j).setText(cell_text)
        else:
            for i in range(len(ecosystem.forest.hectares)):
                for j in range(len(ecosystem.forest.hectares[i])):
                    cell_text = f"Существ в гектаре: {len(ecosystem.forest.hectares[i][j].creations)}"
                    self.worldMapTable.item(i, j).setText(cell_text)

    def _table_elements_size_policy(self) -> None:
        """Determines size policy of items of worldMapTable"""
        self.worldMapTable.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.worldMapTable.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)

    def _emplace_elements(self, ecosystem: EcoSystem) -> None:
        """Creates items of worldMapTable

        ecosystem - data controller part of program
        """
        self.worldMapTable.setColumnCount(ecosystem.forest.horizontal_length)
        self.worldMapTable.setRowCount(ecosystem.forest.vertical_length)
        self.worldMapTable.setHorizontalHeaderLabels([str(index) for index in range(1, ecosystem.forest.horizontal_length + 1)])
        self.worldMapTable.setVerticalHeaderLabels([str(index) for index in range(1, ecosystem.forest.vertical_length + 1)])
        self._table_elements_size_policy()
        row = 0
        for hectares_line in ecosystem.forest.hectares:
            column = 0
            for _ in hectares_line:
                item = QtWidgets.QTableWidgetItem()
                brush = QtGui.QBrush(QtGui.QColor(224, 224, 255))
                brush.setStyle(QtCore.Qt.SolidPattern)
                item.setBackground(brush)
                self.worldMapTable.setItem(row, column, item)
                column += 1
            row += 1
        self._update_table(ecosystem)
        if not (ecosystem.forest.vertical_length == 0 or ecosystem.forest.horizontal_length == 0):
            self.worldMapTable.setCurrentCell(0, 0)
            self._show_creatures(ecosystem)

    def _makeToolBarFunction(self) -> None:
        """Shows toolBar and stop game (open game menu)"""
        self._stop_game()
        self.toolBar.setEnabled(True)
        self.toolBar.setVisible(True)
        self.autoPeriodButton.setEnabled(False)

    def _closeToolBarFunction(self) -> None:
        """Hides toolBar and continue game (close game menu)"""
        self._continue_game(game_running_flag=True)
        self.toolBar.setEnabled(False)
        self.toolBar.setVisible(False)
        self.autoPeriodButton.setEnabled(True)

    def _showLoadFileDialog(self, MainWindow: CustomMainWindow, ecosystem: EcoSystem) -> None:
        """Creates file dialog to load saved world. Load world from file

        MainWindow - main window of game
        ecosystem - data controller part of program
        """
        self._pause_game()
        fname = QFileDialog.getOpenFileName(MainWindow, 'Загрузить файл', configs.BASIC_SAVES_DIR_LINUX_PATH,
                                            filter="JSON files (*.json)", initialFilter="(*.json)")[0]
        if not fname:
            self._filenameError(configs.GuiMessages.FILE_NOT_CHOSEN.value)
            return
        try:
            ecosystem.load(fname)
            print(ecosystem)
            self._emplace_elements(ecosystem)
            self._update(ecosystem)
            MainWindow.raise_running_game_flag()
            self.showMapAction.setCheckable(True)
            _, file = os.path.split(fname)
            self._closeToolBarFunction()
            MainWindow.lower_tool_bar_active_flag()
            self.statusBar.showMessage(configs.GuiMessages.FILE_LOADED.value.format(file),
                                       msecs=configs.MESSAGE_DURATION)
        except ValueError as ve:
            self._filenameError(ve.args[0])

    def _showSaveFileDialog(self, MainWindow: CustomMainWindow, ecosystem: EcoSystem) -> None:
        """Creates save dialog to save world. Saves file.

        MainWindow - main window of game
        ecosystem - data controller part of program
        """
        if MainWindow.game_running_flag:
            self._pause_game()
            fname = QFileDialog.getSaveFileName(MainWindow, 'Save file', configs.BASIC_SAVES_DIR_LINUX_PATH,
                                                filter="JSON files (*.json)", initialFilter="(*.json)")[0]
            if not fname:
                self._filenameError(configs.GuiMessages.FILE_NOT_CHOSEN.value)
                return
            try:
                ecosystem.save(fname)
                self._closeToolBarFunction()
                MainWindow.lower_tool_bar_active_flag()
                self.statusBar.showMessage(configs.GuiMessages.FILE_SAVED.value.format(fname),
                                           msecs=configs.MESSAGE_DURATION)
            except ValueError as ve:
                self._filenameError(ve.args[0])

    def _filenameError(self, msg: str) -> None:
        """Shows message box if errors occured in file dialog

        msg - informative text for message box (error message)
        """
        error_msg_box = QMessageBox()
        error_msg_box.setWindowTitle("Файл не был выбран")
        error_msg_box.setText("Вы отменили выбор файла либо что-то пошло не так.")
        error_msg_box.setInformativeText(msg)
        error_msg_box.setIcon(QMessageBox.Information)
        error_msg_box.setStandardButtons(QMessageBox.Ok)
        error_msg_box.setDefaultButton(QMessageBox.Ok)
        error_msg_box.adjustSize()
        error_msg_box.exec()

    def _simple_save_of_game(self, MainWindow: CustomMainWindow, ecosystem: EcoSystem) -> None:
        """Save game with automatic selection of file

        MainWindow - main window of game
        ecosystem - data controller part of program
        """
        if MainWindow.game_running_flag:
            ecosystem.save()
            self._closeToolBarFunction()
            MainWindow.lower_tool_bar_active_flag()
            self.statusBar.showMessage(configs.GuiMessages.FILE_SAVED.value.format(ecosystem.filename),
                                       msecs=configs.MESSAGE_DURATION)

    def _map_action_triggered(self, MainWindow: CustomMainWindow) -> None:
        """Shows or hide map

         MainWindow - main window of game
         """
        if MainWindow.game_running_flag:
            if self.showMapAction.isChecked():
                self._show_map()
            else:
                self._hide_map()

    def _show_map(self) -> None:
        """Hides background of menu and shows worldMapTable and cellDataWidget

         User can check condition of world, but can't change it
         """
        self._hide_background_picture()
        self.worldMapTable.setVisible(True)
        self.worldMapTable.setEnabled(True)
        self.cellDataListWidget.setVisible(True)

    def _hide_map(self) -> None:
        """Hides map (shows menu background and hide world)"""
        self._show_background_picture()
        self.worldMapTable.setEnabled(False)
        self.worldMapTable.setVisible(False)
        self.cellDataListWidget.setVisible(False)

    def _hide_background_picture(self) -> None:
        """Change background of central widget"""
        self.centralwidget.setStyleSheet("background-color: rgb(255, 250, 230);")

    def _show_background_picture(self) -> None:
        """Change background of central widget"""
        self.centralwidget.setStyleSheet(f"border-image: url({configs.SERVICE_ICONS['menu_background']});")

    def _set_objects_enabled_flag(self, flag: bool) -> None:
        """Sets enabled with flag for every object of main window

        flag - bool flag to set
        """
        self.addCreatureButton.setEnabled(flag)
        self.removeCreatureButton.setEnabled(flag)
        self.periodButton.setEnabled(flag)
        self.autoPeriodButton.setEnabled(flag)
        if self.autoPeriodButton.isChecked():
            if not flag:
                self.reduceAutoSpeedButton.setEnabled(flag)
                self.increaseAutoSpeedButton.setEnabled(flag)
            else:
                self._enabled_support_auto_period_buttons()
        self.wakeDeadlyWormButton.setEnabled(flag)
        self.appocalipseButton.setEnabled(flag)
        self.worldMapTable.setEnabled(flag)
        self.cellDataListWidget.setEnabled(flag)

    def _set_objects_visible_flag(self, flag: bool) -> None:
        """Sets visible with flag for every object of main window"""
        self.addCreatureButton.setVisible(flag)
        self.removeCreatureButton.setVisible(flag)
        self.periodButton.setVisible(flag)
        self.reduceAutoSpeedButton.setVisible(flag)
        self.autoPeriodButton.setVisible(flag)
        self.increaseAutoSpeedButton.setVisible(flag)
        self.wakeDeadlyWormButton.setVisible(flag)
        self.appocalipseButton.setVisible(flag)
        self.worldMapTable.setVisible(flag)
        self.cellDataListWidget.setVisible(flag)

    def _pause_game(self) -> None:
        """Make pause of game (setEnabled(False), not change visible)"""
        if self.autoPeriodButton.isChecked():
            self._cancel_auto_period_thread()
        self._set_objects_enabled_flag(False)
        self.statusBar.showMessage(configs.GuiMessages.PAUSE_MESSAGE.value)

    def _stop_game(self) -> None:
        """Make pause, creates menu"""
        if self.autoPeriodButton.isChecked():
            self._cancel_auto_period_thread()
        self._set_objects_enabled_flag(False)
        self._set_objects_visible_flag(False)
        self._show_background_picture()
        self.statusBar.showMessage(configs.GuiMessages.PAUSE_MESSAGE.value)

    def _continue_game(self, game_running_flag: bool) -> None:
        """Continue game after pause

        game_running_flag - flag to check if game is running now
        """
        if game_running_flag:
            if self.autoPeriodButton.isChecked():
                self._start_auto_period_in_thread()
            self._set_objects_visible_flag(True)
            self._set_objects_enabled_flag(True)
            self._hide_background_picture()
            self.statusBar.clearMessage()

    def _leave_world(self, MainWindow: CustomMainWindow, ecosystem: EcoSystem) -> None:
        """Close current world.

        Requires acception to leave world. User can leave world without saving, can save world and leave it, can
        reject this action.

        MainWindow - main window of game
        ecosystem - data controller part of program
        """
        if MainWindow.game_running_flag:
            _, filename = os.path.split(ecosystem.filename)
            result = QtWidgets.QMessageBox.question(
                MainWindow,
                f"Покидаете {filename}?",
                f"Вы действительно хотите покинуть мир {filename}? Несохранённые изменения будут утеряны.",
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Save,
                QtWidgets.QMessageBox.No)
            if result == QtWidgets.QMessageBox.Yes:
                MainWindow.lower_running_game_flag()
                self.statusBar.showMessage(configs.GuiMessages.LEAVE_WORLD.value, configs.MESSAGE_DURATION)
            elif result == QtWidgets.QMessageBox.Save:
                ecosystem.save()
                MainWindow.lower_running_game_flag()
                self.statusBar.showMessage(configs.GuiMessages.LEAVE_WORLD.value, configs.MESSAGE_DURATION)

    def retranslateUi(self, MainWindow) -> None:
        """Set text, tooltips and shortcuts for all MainWindow objects

        MainWindow - main window of game
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", f"Forest EcoSystem {configs.VERSION}"))
        self.addCreatureButton.setToolTip(_translate("MainWindow", "Добавить существ в выбранный гектар, + или Num+"))
        self.addCreatureButton.setShortcut(_translate("MainWindow", "+", "Num+"))
        self.removeCreatureButton.setToolTip(_translate("MainWindow", "Уничтожить выбранное существо, - или Num-"))
        self.removeCreatureButton.setShortcut(_translate("MainWindow", "-", "Num-"))
        self.wakeDeadlyWormButton.setToolTip(_translate("MainWindow", "Пробудить смерточервя, W"))
        self.wakeDeadlyWormButton.setText(_translate("MainWindow", "Смерточервь"))
        self.wakeDeadlyWormButton.setShortcut(_translate("MainWindow", "W"))
        self.periodButton.setToolTip(_translate("MainWindow", "Сменить временной период, N"))
        self.periodButton.setShortcut(_translate("MainWindow", "N"))
        self.reduceAutoSpeedButton.setToolTip(_translate("MainWindow", "Замедлить течение времени (работает при при включенном автоматическом режиме), <"))
        self.reduceAutoSpeedButton.setText(_translate("MainWindow", "Замедлить"))
        self.reduceAutoSpeedButton.setShortcut(_translate("MainWindow", "<"))
        self.autoPeriodButton.setToolTip(_translate("MainWindow", "Режим автоматической смены времени, A"))
        self.autoPeriodButton.setText(_translate("MainWindow", "Авто"))
        self.autoPeriodButton.setShortcut(_translate("MainWindow", "A"))
        self.increaseAutoSpeedButton.setToolTip(_translate("MainWindow", "Ускорить течение времени (работает при при включенном автоматическом режиме), >"))
        self.increaseAutoSpeedButton.setText(_translate("MainWindow", "Ускорить"))
        self.increaseAutoSpeedButton.setShortcut(_translate("MainWindow", ">"))
        self.appocalipseButton.setToolTip(_translate("MainWindow", "Вызвать апокалипсис, Del"))
        self.appocalipseButton.setText(_translate("MainWindow", "Апокалипсис"))
        self.appocalipseButton.setShortcut(_translate("MainWindow", "Del"))
        __sortingEnabled = self.worldMapTable.isSortingEnabled()
        self.worldMapTable.setSortingEnabled(False)
        self.worldMapTable.setSortingEnabled(__sortingEnabled)
        __sortingEnabled = self.cellDataListWidget.isSortingEnabled()
        self.cellDataListWidget.setSortingEnabled(False)
        self.cellDataListWidget.setSortingEnabled(__sortingEnabled)
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.newWorldAction.setText(_translate("MainWindow", "Создать новый мир"))
        self.loadWorldAction.setText(_translate("MainWindow", "Загрузить мир"))
        self.loadWorldAction.setToolTip(_translate("MainWindow", "Загрузить мир F9"))
        self.loadWorldAction.setShortcut(_translate("MainWindow", "F9"))
        self.leaveWorldAction.setText(_translate("MainWindow", "Покинуть мир"))
        self.exitGameAction.setText(_translate("MainWindow", "Выйти на рабочий стол"))
        self.saveAsWorldAction.setText(_translate("MainWindow", "Сохранить мир как..."))
        self.saveAsWorldAction.setToolTip(_translate("MainWindow", "Сохранить мир как Ctrl + S"))
        self.saveAsWorldAction.setShortcut(_translate("MainWindow", "Ctrl+s"))
        self.saveWorldAction.setText(_translate("MainWindow", "Сохранить мир"))
        self.saveWorldAction.setToolTip(_translate("MainWindow", "Сохранить мир F5"))
        self.saveWorldAction.setShortcut(_translate("MainWindow", "F5"))
        self.helpAction.setText(_translate("MainWindow", "Помощь"))
        self.helpAction.setToolTip(_translate("MainWindow", "Помощь F11"))
        self.helpAction.setShortcut(_translate("MainWindow", "F11"))
        self.showMapAction.setText(_translate("MainWindow", "Карта мира"))
        self.showMapAction.setToolTip(_translate("MainWindow", "Покажет карту вашего мира, M"))
        self.showMapAction.setShortcut(_translate("MainWindow", "m"))


def play_graphic_mode() -> None:
    """Starts game in graphical mode"""
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = CustomMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow, EcoSystem())
    MainWindow.show()
    sys.exit(app.exec_())
